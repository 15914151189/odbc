// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "odbconnect_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// list_drivers
Rcpp::DataFrame list_drivers();
RcppExport SEXP odbconnect_list_drivers() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(list_drivers());
    return rcpp_result_gen;
END_RCPP
}
// odbconnect_connect
connection_ptr odbconnect_connect(std::string connection_string);
RcppExport SEXP odbconnect_odbconnect_connect(SEXP connection_stringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type connection_string(connection_stringSEXP);
    rcpp_result_gen = Rcpp::wrap(odbconnect_connect(connection_string));
    return rcpp_result_gen;
END_RCPP
}
// connection_info
Rcpp::List connection_info(connection_ptr p);
RcppExport SEXP odbconnect_connection_info(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(connection_info(p));
    return rcpp_result_gen;
END_RCPP
}
// connection_quote
std::string connection_quote(connection_ptr p);
RcppExport SEXP odbconnect_connection_quote(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(connection_quote(p));
    return rcpp_result_gen;
END_RCPP
}
// connection_special
std::string connection_special(connection_ptr p);
RcppExport SEXP odbconnect_connection_special(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(connection_special(p));
    return rcpp_result_gen;
END_RCPP
}
// connection_release
void connection_release(connection_ptr p);
RcppExport SEXP odbconnect_connection_release(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr >::type p(pSEXP);
    connection_release(p);
    return R_NilValue;
END_RCPP
}
// connection_begin
void connection_begin(connection_ptr p);
RcppExport SEXP odbconnect_connection_begin(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr >::type p(pSEXP);
    connection_begin(p);
    return R_NilValue;
END_RCPP
}
// connection_commit
void connection_commit(connection_ptr p);
RcppExport SEXP odbconnect_connection_commit(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr >::type p(pSEXP);
    connection_commit(p);
    return R_NilValue;
END_RCPP
}
// connection_rollback
void connection_rollback(connection_ptr p);
RcppExport SEXP odbconnect_connection_rollback(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr >::type p(pSEXP);
    connection_rollback(p);
    return R_NilValue;
END_RCPP
}
// connection_valid
bool connection_valid(connection_ptr p);
RcppExport SEXP odbconnect_connection_valid(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(connection_valid(p));
    return rcpp_result_gen;
END_RCPP
}
// connection_sql_tables
std::vector<std::string> connection_sql_tables(connection_ptr p, std::string catalog_name, std::string schema_name, std::string table_name, std::string table_type);
RcppExport SEXP odbconnect_connection_sql_tables(SEXP pSEXP, SEXP catalog_nameSEXP, SEXP schema_nameSEXP, SEXP table_nameSEXP, SEXP table_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string >::type catalog_name(catalog_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type schema_name(schema_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type table_name(table_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type table_type(table_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(connection_sql_tables(p, catalog_name, schema_name, table_name, table_type));
    return rcpp_result_gen;
END_RCPP
}
// connection_sql_columns
Rcpp::DataFrame connection_sql_columns(connection_ptr p, std::string column_name, std::string catalog_name, std::string schema_name, std::string table_name);
RcppExport SEXP odbconnect_connection_sql_columns(SEXP pSEXP, SEXP column_nameSEXP, SEXP catalog_nameSEXP, SEXP schema_nameSEXP, SEXP table_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string >::type column_name(column_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type catalog_name(catalog_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type schema_name(schema_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type table_name(table_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(connection_sql_columns(p, column_name, catalog_name, schema_name, table_name));
    return rcpp_result_gen;
END_RCPP
}
// result_release
void result_release(result_ptr r);
RcppExport SEXP odbconnect_result_release(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr >::type r(rSEXP);
    result_release(r);
    return R_NilValue;
END_RCPP
}
// result_active
bool result_active(result_ptr r);
RcppExport SEXP odbconnect_result_active(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(result_active(r));
    return rcpp_result_gen;
END_RCPP
}
// result_completed
bool result_completed(result_ptr r);
RcppExport SEXP odbconnect_result_completed(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(result_completed(r));
    return rcpp_result_gen;
END_RCPP
}
// new_result
result_ptr new_result(connection_ptr p, std::string sql, std::size_t size);
RcppExport SEXP odbconnect_new_result(SEXP pSEXP, SEXP sqlSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< connection_ptr >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string >::type sql(sqlSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(new_result(p, sql, size));
    return rcpp_result_gen;
END_RCPP
}
// result_fetch
List result_fetch(result_ptr r, int n_max);
RcppExport SEXP odbconnect_result_fetch(SEXP rSEXP, SEXP n_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type n_max(n_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(result_fetch(r, n_max));
    return rcpp_result_gen;
END_RCPP
}
// result_column_info
Rcpp::DataFrame result_column_info(result_ptr r);
RcppExport SEXP odbconnect_result_column_info(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(result_column_info(r));
    return rcpp_result_gen;
END_RCPP
}
// result_bind
void result_bind(result_ptr r, std::string sql, List params);
RcppExport SEXP odbconnect_result_bind(SEXP rSEXP, SEXP sqlSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr >::type r(rSEXP);
    Rcpp::traits::input_parameter< std::string >::type sql(sqlSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    result_bind(r, sql, params);
    return R_NilValue;
END_RCPP
}
// result_execute
void result_execute(result_ptr r);
RcppExport SEXP odbconnect_result_execute(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr >::type r(rSEXP);
    result_execute(r);
    return R_NilValue;
END_RCPP
}
// result_insert_dataframe
void result_insert_dataframe(result_ptr r, DataFrame df);
RcppExport SEXP odbconnect_result_insert_dataframe(SEXP rSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr >::type r(rSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    result_insert_dataframe(r, df);
    return R_NilValue;
END_RCPP
}
// result_rows_affected
int result_rows_affected(result_ptr r);
RcppExport SEXP odbconnect_result_rows_affected(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(result_rows_affected(r));
    return rcpp_result_gen;
END_RCPP
}
// result_row_count
int result_row_count(result_ptr r);
RcppExport SEXP odbconnect_result_row_count(SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< result_ptr >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(result_row_count(r));
    return rcpp_result_gen;
END_RCPP
}
// column_types
void column_types(DataFrame df);
RcppExport SEXP odbconnect_column_types(SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    column_types(df);
    return R_NilValue;
END_RCPP
}
